{"version":3,"sources":["MJBH-Resume.pdf","Components/ProjectPage/ProjectPage.jsx","Components/AboutMe/AboutMe.jsx","Components/TitlePage/TitlePage.jsx","Components/Buttons/Buttons.jsx","Components/Contact/Contact.jsx","App.js","Constants.js","serviceWorker.js","index.js"],"names":["module","exports","ProjectPage","title","info","backgroundText","backgroundColor","projectPic","className","style","AboutMe","useState","fixedState","setFixedState","window","addEventListener","e","scrollY","innerHeight","aboutMeObj","TitlePage","onClick","open","Resume","id","Contact","class","projectPage","obj","this","stateFarm","guessNumber","faceRecognition","robofriends","postIt","fourDoorTour","App","NewPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18468003.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MJBH-Resume.ed46d576.pdf\";","import React from \"react\";\r\nimport \"./ProjectPage.css\";\r\n\r\nexport default function ProjectPage({\r\n  title,\r\n  info,\r\n  backgroundText,\r\n  backgroundColor,\r\n  projectPic,\r\n}) {\r\n  return (\r\n    <div className={projectPic} style={{ backgroundColor: backgroundColor }}>\r\n      <div className=\"info\">\r\n        <div className=\"title\">{title}</div>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"text-container\">\r\n          <div className=\"background-text\">{backgroundText}</div>\r\n          <div className=\"text\">{info}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport ProjectPage from \"../ProjectPage/ProjectPage\";\r\n\r\nconst AboutMe = () => {\r\n  const fixed = \"bg fixed bg1\";\r\n  const notFixed = \"bg bg1\";\r\n  const [fixedState, setFixedState] = useState(notFixed);\r\n  function setFixedBackgroud(e) {\r\n    if (window.scrollY >= window.innerHeight) {\r\n      setFixedState(fixed);\r\n    } else {\r\n      setFixedState(notFixed);\r\n    }\r\n  }\r\n  window.addEventListener(\"scroll\", setFixedBackgroud);\r\n\r\n  let aboutMeObj = {\r\n    title: \"About Me\",\r\n    info:\r\n      \"Hello, thank you for visiting my page. I am a self-taught web developer born and raised in Dallas, Texas. After getting my CompTIA A+ certification a few years back and working in a tech support role, I found my true passion for coding. I began using Udemy, YouTube, and Harvard's CS50 online courses to learn to be a programmer. I've spent over 1000 hours studying computer science and web development, and now I create user-friendly applications while striving to write readable and scalable code. My years of being in the service industry have made me a strong communicator, hard-worker, and team player. I am also a huge believer in life-long learning and look forward to continuing to grow as a developer.\",\r\n    backgroundText: \"About Me\",\r\n    backgroundColor: \"#5cf4ff\",\r\n    projectPic: fixedState,\r\n  };\r\n\r\n  return (\r\n    <ProjectPage\r\n      title={aboutMeObj.title}\r\n      info={aboutMeObj.info}\r\n      backgroundText={aboutMeObj.backgroundText}\r\n      backgroundColor={aboutMeObj.backgroundColor}\r\n      projectPic={aboutMeObj.projectPic}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AboutMe;\r\n","import React from \"react\";\r\nimport \"./TitlePage.css\";\r\nimport { linkedInTitle, githubTitle, resumeTitle } from \"../Buttons/Buttons\";\r\n\r\nexport default function TitlePage() {\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n        <div className=\"menu\">\r\n          <p className=\"initials\">mh.</p>\r\n          <ul>\r\n            <li>{linkedInTitle()}</li>\r\n            <li>{githubTitle()}</li>\r\n            <li>{resumeTitle()}</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"main\">\r\n          <p className=\"welcome\">\r\n            Hi! I'm <span id=\"name\">Marcos Hinojos</span>\r\n          </p>\r\n          <h1 className=\"title-name\">\r\n            Front-End <br /> Web Developer\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Resume from \"../../../src/MJBH-Resume.pdf\";\r\n// Enter 'title' or 'contact' for which button\r\n\r\nexport const linkedInTitle = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(\r\n        \"https://www.linkedin.com/in/marcos-hinojos-8118251a7/\",\r\n        \"_blank\"\r\n      );\r\n    }}\r\n    className=\"nav raise icons\"\r\n  >\r\n    <i className=\"fab fa-linkedin\"></i>\r\n  </button>\r\n);\r\nexport const linkedInContact = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(\r\n        \"https://www.linkedin.com/in/marcos-hinojos-8118251a7/\",\r\n        \"_blank\"\r\n      );\r\n    }}\r\n    className=\"nav raise nav raise main-button mb-icon\"\r\n  >\r\n    <i className=\"fab fa-linkedin\"></i>\r\n  </button>\r\n);\r\nexport const githubTitle = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(\"https://github.com/mjbh831\", \"_blank\");\r\n    }}\r\n    className=\"nav raise icons\"\r\n  >\r\n    <i className=\"fab fa-github\"></i>\r\n  </button>\r\n);\r\nexport const githubContact = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(\"https://github.com/mjbh831\", \"_blank\");\r\n    }}\r\n    className=\"nav raise main-button mb-icon\"\r\n  >\r\n    <i className=\"fab fa-github-square\"></i>\r\n  </button>\r\n);\r\nexport const resumeTitle = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(Resume, \"_blank\");\r\n    }}\r\n    className=\"nav raise icons\"\r\n  >\r\n    <i className=\"fab fas fa-file-alt\"></i>\r\n  </button>\r\n);\r\nexport const resumeContact = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(Resume, \"_blank\");\r\n    }}\r\n    className=\"nav raise main-button mb-icon\"\r\n  >\r\n    <i className=\"fab fas fa-file-alt\"></i>\r\n  </button>\r\n);\r\nexport const phoneContact = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(\"tel:512-934-1814\");\r\n    }}\r\n    className=\"nav raise main-button mb-icon\"\r\n  >\r\n    <i className=\"fas fa-phone\"></i>\r\n  </button>\r\n);\r\nexport const emailContact = () => (\r\n  <button\r\n    onClick={() => {\r\n      window.open(\"mailto:mjbh831@gmail.com\");\r\n    }}\r\n    className=\"nav raise main-button mb-icon\"\r\n  >\r\n    <i className=\"far fa-envelope\"></i>\r\n  </button>\r\n);\r\n","import React from \"react\";\r\nimport \"../TitlePage/TitlePage.css\";\r\nimport {\r\n  linkedInContact,\r\n  githubContact,\r\n  resumeContact,\r\n  phoneContact,\r\n  emailContact,\r\n} from \"../Buttons/Buttons\";\r\n\r\n//Uses TitlePage CSS Styles\r\n\r\nexport default function Contact() {\r\n  return (\r\n    <footer>\r\n      <div className=\"container contact\">\r\n        <div className=\"last-page\">\r\n          <p className=\"thanks\">Thanks for visiting my page!</p>\r\n          <p className=\"thanks\">I would love to hear from you.</p>\r\n          <h1 className=\"footnote\">contact me</h1>\r\n          {phoneContact()}\r\n          {emailContact()}\r\n          {linkedInContact()}\r\n          {githubContact()}\r\n          {resumeContact()}\r\n        </div>\r\n      </div>\r\n      <div class=\"contact-info\">\r\n        <p>Marcos Hinojos - (512)-934-1814 - mjbh831@gmail.com</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport AboutMe from \"./Components/AboutMe/AboutMe\";\nimport TitlePage from \"./Components/TitlePage/TitlePage\";\nimport ProjectPage from \"./Components/ProjectPage/ProjectPage\";\nimport {\n  stateFarmObj,\n  guessNumberObj,\n  faceRecognitionObj,\n  robofriendsObj,\n  postItObj,\n  fourDoorTourObj,\n} from \"./Constants\";\nimport Contact from \"./Components/Contact/Contact\";\n\n// use projectPage class to add project\nclass projectPage {\n  constructor(obj = {}) {\n    this.title = obj.title;\n    this.info = obj.info;\n    this.backgroundText = obj.backgroundText;\n    this.backgroundColor = obj.backgroundColor;\n    this.projectPic = obj.projectPic;\n  }\n  NewPage() {\n    return (\n      <ProjectPage\n        title={this.title}\n        info={this.info}\n        backgroundText={this.backgroundText}\n        backgroundColor={this.backgroundColor}\n        projectPic={this.projectPic}\n      />\n    );\n  }\n}\n// Project pages from Constants objects file\nconst stateFarm = new projectPage(stateFarmObj);\nconst guessNumber = new projectPage(guessNumberObj);\nconst faceRecognition = new projectPage(faceRecognitionObj);\nconst robofriends = new projectPage(robofriendsObj);\nconst postIt = new projectPage(postItObj);\nconst fourDoorTour = new projectPage(fourDoorTourObj);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TitlePage />\n      <AboutMe />\n      {stateFarm.NewPage()}\n      {guessNumber.NewPage()}\n      {faceRecognition.NewPage()}\n      {robofriends.NewPage()}\n      {postIt.NewPage()}\n      {fourDoorTour.NewPage()}\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","export const stateFarmObj = {\r\n  title: \"EarthxHack State Farm Sponser Challenge\",\r\n  info:\r\n    \"State Farm challenged hackathon entrants to come up with a way to better serve their customer base during times of emergency like the COVID-19 pandemic. I built a feature on top of their existing app that allows users to enroll in community challenges and earn points that can be used toward policy discounts. One example is a challenge that encouraged users to upload an image of themselves wearing their homemade mask. This image was then validated by the Clarifai image recognition API which I trained to identify facemask. My submission won 2nd place.\",\r\n  backgroundText: \"State Farm\",\r\n  backgroundColor: \"#ffffff\",\r\n  projectPic: \"bg fixed bg2\",\r\n};\r\nexport const guessNumberObj = {\r\n  title: \"Stump the Chump Number Game\",\r\n  info:\r\n    \"A React Native application that utilizes React hooks such as useState, useRef, and useEffect to create reusable components for gameplay. Developed using Android Studio and Expo, this game allows the user to select a number for the computer to guess while giving clues along the way and trying to stump the computer for 10 or more guesses.\",\r\n  backgroundText: \"Stump \\n the Chump\",\r\n  backgroundColor: \"#4D8CD0\",\r\n  projectPic: \"bg fixed bg3\",\r\n};\r\nexport const faceRecognitionObj = {\r\n  title: \"Face Recognition App\",\r\n  info:\r\n    \"A React app that identifies the face in an image. This app allows a registered user to upload an image, detect the face in the image, and update the number of images each user has submitted. The server was created using Node.js and Express. Used Postman to quickly check GET and POST requests. I also utilized Postgres, Knex.js, and bcrypt to securely save user information to the database.\",\r\n  backgroundText: \"Face \\n Recognition \\n App\",\r\n  backgroundColor: \"#D83711\",\r\n  projectPic: \"bg fixed bg4\",\r\n};\r\nexport const robofriendsObj = {\r\n  title: \"RoboFriends\",\r\n  info:\r\n    \"A searchable directory for all your robofriends! This app was built using React and Redux and connects with the JSONPlaceholder API to populate the directory, then it creates a unique robot avatar for each person by using the robohash API. Insert your JSON formatted contact list to see your all your friend's unique robots in this cool directory.\",\r\n  backgroundText: \"Robo- \\n friends\",\r\n  backgroundColor: \"#4FFFA8\",\r\n  projectPic: \"bg fixed bg5\",\r\n};\r\nexport const postItObj = {\r\n  title: \"Interactive Post-It\",\r\n  info:\r\n    \"Built using JavaScript and Flexbox, now your favorite sticky note is right on your screen. Each list item is rotated, spaced, or sized just a bit different to make items appear handwritten and keep from appearing too perfect. Features such as quick-add and quick-clear enhance the user experience.\",\r\n  backgroundText: \"Interactive \\n Post-It\",\r\n  backgroundColor: \"#FFBF42\",\r\n  projectPic: \"bg fixed bg6\",\r\n};\r\nexport const fourDoorTourObj = {\r\n  title: \"Four Door Tour \\n Travel Blog\",\r\n  info:\r\n    \"Multi-page responsive travel blog created using Bootstrap 4, CSS Grid, and Adobe Photoshop. This project was made super easy with the help of Bootstrap and its helpful documentation. One of these days I am taking a cross country road trip and then I'll update the lorem ipsum.\",\r\n  backgroundText: \"Four \\n Door \\n Tour\",\r\n  backgroundColor: \"#69A6FF\",\r\n  projectPic: \"bg fixed bg7\",\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}